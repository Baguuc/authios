openapi: 3.1.0
info:
  title: Authios OpenAPI contract
  version: 0.0.0
  description: |-
    OpenAPI contract for authios:
    [https://github.com/Baguuc/authios](https://github.com/Baguuc/authios)
paths:
  /groups:
    post:
      tags:
        - groups
      summary: Create a group
      security:
        - BearerJwt: []
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: "null"
                example: null
                examples:
                  - null
                title: CreateAGroupCreated
              example: null
              examples:
                - null
          description: Successfuly created the group.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          content:
            text/plain:
              schema:
                enum:
                  - ALREADY_EXIST
                type: string
                default: ALREADY_EXIST
                examples:
                  - ALREADY_EXIST
          description: >-
            ### Message: ALREADY_EXIST

            A group with provided name already exist so new one cannot be
            created.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters: []
      description: Create a group, checking for possible errors.
      operationId: createAGroup
      requestBody:
        required: true
        description: A group model
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
  /permissions:
    post:
      tags:
        - permissions
      summary: Create a permission
      security:
        - BearerJwt: []
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: "null"
                title: CreateAPermissionCreated
          description: The permission was successfuly created.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          content:
            text/plain:
              schema:
                enum:
                  - ALREADY_EXIST
                  - ROOT_GROUP_NOT_FOUND
                type: string
                examples:
                  - ALREADY_EXIST
                description: >-
                  ALREADY_EXIST -> a permission with this name already exist.

                  ROOT_GROUP_NOT_FOUND -> the "root" group cannot be found and
                  because every permission has to be granted to it, permission
                  cannot be created.
          description: >-
            ### Message: ALREADY_EXIST

            A permission with provided name already exists in the database, so a
            new one cannot be created.


            ### Message: ROOT_GROUP_NOT_FOUND

            The "root" group cannot be found, and as it is required that every
            permission is granted to it, the permission cannot be created.

            The system needs to be inited prior to use.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters: []
      description: Create a permission, checking for possible errors.
      operationId: createAPermission
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
              description: A permission object
        required: true
        description: Requires a permission object represented in JSON format in
          request's body.
  /groups/{name}:
    delete:
      tags:
        - groups
      summary: Delete a group
      security:
        - BearerJwt: []
      responses:
        "204":
          content:
            text/plain:
              schema:
                type: "null"
                title: DeleteAGroupNoContent
          description: Successfuly deleted the group.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          content:
            text/plain:
              schema:
                enum:
                  - NOT_FOUND
                type: string
                default: NOT_FOUND
                examples:
                  - NOT_FOUND
          description: >-
            ### Message: NOT_FOUND

            A group with provided name do not exist in the database, so it
            cannot be deleted.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: A name of the group to delete.
      description: Delete a group, checking for possible errors.
      operationId: deleteAGroup
  /permissions/{name}:
    delete:
      tags:
        - permissions
      summary: Delete a permission
      security:
        - BearerJwt: []
      responses:
        "204":
          content:
            text/plain:
              schema:
                type: "null"
                example: null
                examples:
                  - null
                description: Empty response
                title: DeleteAPermissionNoContent
          description: The permission was successfully deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          content:
            text/plain:
              schema:
                enum:
                  - NOT_FOUND
                type: string
                default: NOT_FOUND
                examples:
                  - NOT_FOUND
          description: |-
            ### Message: NOT_FOUND

            A permission with provided name do not exist in the database, so it
            cannot be deleted.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: A name of the permission to delete.
      description: Delete a permission, checking for possible errors.
      operationId: deleteAPermission
  /users/me/permissions/{permission_name}:
    get:
      tags:
        - users
      summary: Check if user a specified permission
      security:
        - BearerJwt: []
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: "null"
                title: CheckIfUserASpecifiedPermissionOk
          description: The user has specified permission
        "401":
          content:
            text/plain:
              schema:
                enum:
                  - INVALID_TOKEN
                  - UNAUTHORIZED
                type: string
                examples:
                  - INVALID_TOKEN
                  - UNAUTHORIZED
                title: CheckIfUserASpecifiedPermissionUnauthorized
          description: |-
            ### Message: INVALID_TOKEN
            The JWT session token user provided is invalid. 

            ### Message: UNAUTHORIZED
            The user do not have the permission
        "404":
          content:
            text/plain:
              schema:
                enum:
                  - PERMISSION_NOT_FOUND
                type: string
                default: PERMISSION_NOT_FOUND
                examples:
                  - PERMISSION_NOT_FOUND
                title: CheckIfUserASpecifiedPermissionNotFound
          description: |-
            ### Message: PERMISSION_NOT_FOUND
            The permission to check for do not exist in the database.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters:
        - in: path
          name: permission_name
          schema:
            type: string
          required: true
          description: The name of the permission to check for
      description: Check if user logged in with a token has a permission
      operationId: checkIfUserASpecifiedPermission
  /users/{user_login}/groups/{group_name}:
    delete:
      operationId: revokeAGroupFromUser
      tags:
        - users
      summary: Revoke a group from user
      parameters:
        - $ref: "#/components/parameters/user_login"
        - $ref: "#/components/parameters/group_name"
      description: Revoke a group from user checking for errors
      security:
        - BearerJwt: []
      responses:
        "204":
          description: The group was successfuly revoked
          content:
            text/plain:
              schema:
                type: "null"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: |-
            ### Message: USER_NOT_FOUND
            The user to revoke the group from do not exist in the database.

            ### Message: GROUP_NOT_FOUND
            The group to revoke do not exist in the database.
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - USER_NOT_FOUND
                  - GROUP_NOT_FOUND
                enum:
                  - USER_NOT_FOUND
                  - GROUP_NOT_FOUND
        "409":
          description: |-
            ### Message: NOT_ADDED_YET
            The group is not yet granted for the user
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - NOT_ADDED_YET
                enum:
                  - NOT_ADDED_YET
        "503":
          $ref: "#/components/responses/Service Unavailable"
    post:
      tags:
        - users
      summary: Grant user a group
      security:
        - BearerJwt: []
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: "null"
                title: GrantUserAGroupCreated
          description: The group was successfuly granted
        "404":
          content:
            text/plain:
              schema:
                enum:
                  - USER_NOT_FOUND
                  - GROUP_NOT_FOUND
                type: string
                examples:
                  - USER_NOT_FOUND
                  - GROUP_NOT_FOUND
                title: GrantUserAGroupNotFound
          description: |-
            ### Message: USER_NOT_FOUND
            The user to grant the group to do not exist in the database

            ### Message: GROUP_NOT_FOUND
            The group to grant do not exist in the database
        "409":
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - ALREADY_ADDED
                default: ALREADY_ADDED
                enum:
                  - ALREADY_ADDED
          description: |-
            ### Message: ALREADY_ADDED
            The provided group is already granted to the user.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters:
        - $ref: "#/components/parameters/user_login"
        - $ref: "#/components/parameters/group_name"
      operationId: grantUserAGroup
      description: Grant user a group, checking for errors
  /groups/{group_name}/permissions/{permission_name}:
    post:
      tags:
        - groups
      summary: Grant a permission to group
      security:
        - BearerJwt: []
      responses:
        "204":
          content:
            text/plain:
              schema:
                type: "null"
                title: GrantAPermissionToGroupNoContent
          description: The permission was successfuly granted to provided group.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          content:
            text/plain:
              schema:
                enum:
                  - GROUP_NOT_FOUND
                  - PERMISION_NOT_FOUND
                type: string
                examples:
                  - GROUP_NOT_FOUND
                  - PERMISION_NOT_FOUND
          description: |-
            ### Message: GROUP_NOT_FOUND
            The group to grant the permission to do not exist in the database.

            ### Message: PERMISSION_NOT_FOUND
            The permission to grant do not exist in the database.
        "409":
          content:
            text/plain:
              schema:
                enum:
                  - ALREADY_ADDED
                type: string
                default: ALREADY_ADDED
                examples:
                  - ALREADY_ADDED
          description: |-
            ### Message: ALREADY_ADDED
            Provided permission is already granted for the provided group.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters:
        - in: path
          name: group_name
          schema:
            type: string
          required: true
          description: Name of the group to grant the permission to
        - in: path
          name: permission_name
          schema:
            type: string
          required: true
          description: Name of the permission to grant
      description: Grant a permission to group, checking for possible errors.
      operationId: grantAPermissionToGroup
    delete:
      tags:
        - groups
      summary: Revoke a permission from group
      security:
        - BearerJwt: []
      responses:
        "204":
          content:
            text/plain:
              schema:
                type: "null"
                title: RevokeAPermissionFromGroupNoContent
          description: The permission was successfuly revoked from the group.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - PERMISSION_NOT_FOUND
                  - GROUP_NOT_FOUND
                enum:
                  - PERMISSION_NOT_FOUND
                  - GROUP_NOT_FOUND
          description: |-
            ### Message: GROUP_NOT_FOUND
            The group to revoke the permission to do not exist in the database.

            ### Message: PERMISSION_NOT_FOUND
            The permission to revoke do not exist in the database.
        "409":
          content:
            text/plain:
              schema:
                enum:
                  - NOT_ADDED_YET
                type: string
                default: NOT_ADDED_YET
                examples:
                  - NOT_ADDED_YET
          description: >-
            ### Message: NOT_ADDED_YET

            The permission provided to be revoked is not yet granted for the
            provided group so cannot be revoked.
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters:
        - in: path
          name: group_name
          schema:
            type: string
          required: true
          description: The name of the group to revoke the permission from
        - in: path
          name: permission_name
          schema:
            type: string
          required: true
          description: The name of the permission to revoke
      description: Revoke a permission from group, checking for possible errors
      operationId: revokeAPermissionFromGroup
  /users/me:
    get:
      operationId: getCurrentUsersInfo
      tags:
        - users
      summary: Get current user's info
      responses:
        "200":
          description: Responds with current user's data in json format
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      pwd:
                        type: string
                      login:
                        type: string
                      groups:
                        type: array
                        items:
                          type: string
                    required:
                      - pwd
                      - login
                      - groups
                required:
                  - data
        "401":
          description: |-
            ### Message: INVALID_TOKEN
            The token user supplied for this operation is invalid
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - INVALID_TOKEN
                enum:
                  - INVALID_TOKEN
        "503":
          $ref: "#/components/responses/Service Unavailable"
      security:
        - BearerJwt: []
      parameters: []
      description: Get current user's info checking for errors
    post:
      operationId: logInAsAUser
      tags:
        - users
      summary: Log in as a user
      requestBody:
        required: true
        description: The login and password of the user to log in as.
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                pwd:
                  type: string
              required:
                - login
                - pwd
      responses:
        "200":
          description: |-
            Successfuly logged in as a user.
            Responds with user token in the respond's body.
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: >-
            ### Message: WRONG_PASSWORD

            The password supplied do not match the one user assigned in the
            database.
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - WRONG_PASSWORD
                default: WRONG_PASSWORD
                enum:
                  - WRONG_PASSWORD
        "404":
          description: |-
            ### Message: USER_NOT_FOUND
            The user to log in as do not exist in the database.
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - USER_NOT_FOUND
                default: USER_NOT_FOUND
                enum:
                  - USER_NOT_FOUND
        "503":
          description: >-
            ### Message: DATABASE_CONNECTION

            A server-side error occured, possibly intercepting application's
            database connection.


            ### Message: CANNOT_GENERATE_TOKEN

            Cannot generate the JWT session token (server-side error).
          content:
            text/plain:
              schema:
                enum:
                  - DATABASE_CONNECTION
                  - CANNOT_GENERATE_TOKEN
                type: string
                default: DATABASE_CONNECTION
                examples:
                  - DATABASE_CONNECTION
                  - CANNOT_GENERATE_TOKEN
  /users/me/permissions:
    get:
      operationId: listCurrentUsersPermisions
      tags:
        - users
      summary: List current user's permisions
      responses:
        "200":
          description: Responds with a list of permission names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: |-
            ### Message: INVALID_TOKEN
            The token user supplied for this operation is invalid
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - INVALID_TOKEN
                enum:
                  - INVALID_TOKEN
        "503":
          $ref: "#/components/responses/Service Unavailable"
      parameters: []
      description: List current user's permissions checking for errors
  /users:
    post:
      operationId: registerAUser
      tags:
        - users
      summary: Register a user
      security: []
      parameters: []
      description: Register a user, checking for errors
      requestBody:
        required: true
        description: A user login and password in `login` and `pwd` fields respectively.
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                pwd:
                  type: string
              required:
                - login
                - pwd
      responses:
        "201":
          description: Successfuly registered the user
          content:
            text/plain:
              schema:
                type: "null"
                example: null
                examples:
                  - null
                title: CreateAGroupCreated
              example: null
              examples:
                - null
        "409":
          description: >-
            ### Message: ALREADY_EXIST

            The user with provided login already exists in the database so the
            new one cannot be registered.
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - ALREADY_EXIST
                default: ALREADY_EXIST
                enum:
                  - ALREADY_EXIST
        "503":
          description: >-
            ### Message: DATABASE_CONNECTION

            A server-side error occured, possibly intercepting application's
            database connection.


            ### Message: CANNOT_HASH_PASSWORD

            The password user provided cannot be hashed to be safely stored in
            the database (server-side error).
          content:
            text/plain:
              schema:
                enum:
                  - DATABASE_CONNECTION
                  - CANNOT_HASH_PASSWORD
                type: string
                default: DATABASE_CONNECTION
                examples:
                  - DATABASE_CONNECTION
                  - CANNOT_HASH_PASSWORD
  /users/me/pwd:
    patch:
      operationId: updateCurrentUsersPassword
      tags:
        - users
      summary: Update current user's password
      requestBody:
        required: true
        description: A object with unhashed password in `pwd` field.
        content:
          application/json:
            schema:
              type: object
              properties:
                pwd:
                  type: string
              required:
                - pwd
      parameters: []
      description: Update current user's password, checking for errors
      security:
        - BearerJwt: []
      responses:
        "204":
          description: The password was successfuly updated.
          content:
            text/plain:
              schema:
                type: "null"
        "401":
          description: |-
            ### Message: INVALID_TOKEN
            The token user supplied for this operation is invalid
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - INVALID_TOKEN
                enum:
                  - INVALID_TOKEN
        "503":
          description: >-
            ### Message: DATABASE_CONNECTION

            A server-side error occured, possibly intercepting application's
            database connection.


            ### Message: CANNOT_HASH_PASSWORD

            The password user provided cannot be hashed to be safely stored in
            the database (server-side error).
          content:
            text/plain:
              schema:
                enum:
                  - DATABASE_CONNECTION
                  - CANNOT_HASH_PASSWORD
                type: string
                examples:
                  - DATABASE_CONNECTION
                  - CANNOT_HASH_PASSWORD
components:
  responses:
    Unauthorized:
      description: >-
        ### Message: UNAUTHORIZED

        The user do not have "authios:all" permission required to perform this
        operation.


        ### Message: INVALID_TOKEN

        The token user supplied for this operation is invalid
      content:
        text/plain:
          schema:
            type: string
            examples:
              - UNAUTHORIZED
              - INVALID_TOKEN
            enum:
              - UNAUTHORIZED
              - INVALID_TOKEN
    Service Unavailable:
      description: >-
        ### Message: DATABASE_CONNECTION

        A server-side error occured, possibly intercepting application's
        database connection.
      content:
        text/plain:
          schema:
            enum:
              - DATABASE_CONNECTION
            type: string
            default: DATABASE_CONNECTION
            examples:
              - DATABASE_CONNECTION
  parameters:
    group_name:
      in: path
      name: group_name
      schema:
        type: string
      required: true
    user_login:
      in: path
      name: user_login
      schema:
        type: string
      required: true
    permission_name:
      in: path
      name: permission_name
      schema:
        type: string
      required: true
  securitySchemes:
    BearerJwt:
      type: http
      scheme: Bearer
      description: Json Web Token (JWT)
      bearerFormat: Json Web Token (JWT)
tags:
  - name: permissions
  - name: groups
  - name: users
